/**
 * @author Quentin Misslin
 * 
 * Constructor for a Spritesheet element.
 * The input element is a Json file generated by the "Piskel" 
 * software in the "PixiJS Movie" format.
 * 
 * The format of the json file is as follows
 * 
 * {
 *     "frames": {
 *         "spritename0.png": {
 *             "frame": { "x": 0, "y": 0, "w": 100, "h": 100 },
 *             "rotated": false,
 *             "trimmed": false,
 *             "spriteSourceSize": { "x": 0, "y": 0, "w": 100, "h": 100 },
 *             "sourceSize": { "w": 100, "h": 100 }
 *         },
 *         "spritename1.png": {... }
 *     },
 *     "meta": {
 *         "app": "https://github.com/piskelapp/piskel/",
 *         "version": "1.0",
 *         "image": "square.png",
 *         "format": "RGBA8888",
 *         "size": {
 *             "w": 16,
 *             "h": 24
 *         }
 *     }
 * }
 * 
 * @param {Array} url_array String list of url of json files
 */
function Spritesheet(url_array) {

    // Init all attributes;
    this.enqueued = 0;
    this.queue = [];
    this.enqueue(url_array);
    this.sprites = {};
}

/**
 * Add an element to the queue to load
 * @param {Array} url_array String list of url of json files
 */
Spritesheet.prototype.enqueue = function(url_array) {

    if (url_array != null && url_array.length > 0) {
        url_array.forEach(url => {

            // Remove file name from json url
            let path = url.substring(0, url.lastIndexOf("/") + 1);

            // Enqueue element
            this.queue.push({
                json_url: url,
                image_url: "",
                path: path,
                json: null,
                image: null,
                status: "Pending",
            });
        });
    }
}

/**
 * Default function called at the end of loading
 */
Spritesheet.prototype.endLoading = function() {
    console.log("The loading of the Spritesheet is completed : ", this.queue);
}

/**
 * Function to start loading all enqueued elements
 */
Spritesheet.prototype.startLoading = function() {

    let that = this;

    this.queue.forEach(data => {

        // Check and update status
        if (data.status != "Pending") return;
        data.status = "Loading";

        // Load json file
        fetch(data.json_url)
            .then(response => that.requestJson(response, data))
            .then(json => that.requestImage(json, data));

    })
}

/**
 * Function to start loading a json file
 * @param {Object} response Response object given by fetch
 * @param {Object} data Data of current loaded element
 */
Spritesheet.prototype.requestJson = function(response, data) {

    if (response.status == 200) {
        return response.json();
    }
    this.loadingJsonFail(data);
    return false;
}

/**
 * Function to start loading an image file
 * @param {Object} json Json given by fetch
 * @param {Object} data Data of current loaded element
 */
Spritesheet.prototype.requestImage = function(json, data) {

    if (!json) return;

    let that = this;
    let image = new Image();

    data.json = json;
    data.image = image;

    data.image_url = data.path + json.meta.image;
    image.onload = function() { that.successfulImageLoading(data) }
    image.onerror = function() { that.loadingImageFail(data) }
    image.src = data.image_url;
}

/**
 * Function called if the Json could not be loaded
 * @param {Object} data Data of current loaded element
 */
Spritesheet.prototype.loadingJsonFail = function(data) {

    console.error("Fail to load json :", data.json_url);
    data.status = "Failed";
    this.enqueued--;
    this.checkLoading();
}

/**
 * Function called if the image could not be loaded
 * @param {Object} data Data of current loaded element
 */
Spritesheet.prototype.loadingImageFail = function(data) {

    console.error("Fail to load image :", data.image_url);
    data.status = "Failed";
    this.enqueued--;
    this.checkLoading();
}

/**
 * Function called if the image is loaded correctly
 *  @param {Object} data Data of current loaded element
 */
Spritesheet.prototype.successfulImageLoading = function(data) {

    // Create sprite
    this.appendSpritesheet(data);

    // Loading validation
    data.status = "Success";
    this.enqueued--;
    this.checkLoading();
}


/**
 * Function to add all loaded sprite from spritesheet
 * @param {Object} data Data of current loaded element
 */
Spritesheet.prototype.appendSpritesheet = function(data) {

    let that = this;

    Object.keys(data.json.frames).forEach(key => {

        // Get current sprite data
        let sprite_data = data.json.frames[key];

        // Remove file extension from key
        let name = key.substring(0, key.lastIndexOf("."));

        // Create new cleaned data for sprite
        let sprite = {
            x: sprite_data.frame.x,
            y: sprite_data.frame.y,
            w: sprite_data.frame.w,
            h: sprite_data.frame.h,
            image: data.image
        }

        // Append sprite to sprites list
        that.sprites[name] = sprite;
    })
}

/**
 * Check if all the requested elements have finished loading.
 */
Spritesheet.prototype.checkLoading = function() {
    if (!this.queue.some(e => e.status != "Success" & e.status != "Failed")) {
        this.endLoading();
    }
}